<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="lv__ll_8h" kind="file" language="C++">
    <compoundname>lv_ll.h</compoundname>
    <innerclass refid="structlv__ll__t" prot="public">lv_ll_t</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="lv__ll_8h_1aaaf22c8c1939f8ea17c80be0b1e9f299" prot="public" static="no">
        <type>uint8_t</type>
        <definition>typedef uint8_t lv_ll_node_t</definition>
        <argsstring></argsstring>
        <name>lv_ll_node_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dummy type to make handling easier </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="30" column="1" bodyfile="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="lv__ll_8h_1a991a8cdd1d53fcc0b2c7e1f2e55b067b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lv_ll_init</definition>
        <argsstring>(lv_ll_t *ll_p, uint32_t node_size)</argsstring>
        <name>_lv_ll_init</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>node_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_dsc</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to ll_dsc variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of 1 node in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1aa31c1d6a2e32e1856251106d33776d24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_ins_head</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_ins_head</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new head to a linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new head </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a9a4f20f45be3cef5c096e416c2c61412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_ins_prev</definition>
        <argsstring>(lv_ll_t *ll_p, void *n_act)</argsstring>
        <name>_lv_ll_ins_prev</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a new node in front of the n_act node <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer a node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new head </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1aec8d0200f25596706df1c2f79a0919ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_ins_tail</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_ins_tail</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new tail to a linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the new tail </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a1751f3dd6c080b86d65f304d1949753c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lv_ll_remove</definition>
        <argsstring>(lv_ll_t *ll_p, void *node_p)</argsstring>
        <name>_lv_ll_remove</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove the node &apos;node_p&apos; from &apos;ll_p&apos; linked list. It does not free the the memory of node. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the linked list of &apos;node_p&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to node in &apos;ll_p&apos; linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a100edcf0f1651fc36ebd6d3c12238a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lv_ll_clear</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_clear</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove and free all elements from a linked list. The list remain valid but become empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1ae9cbd92fc77a8a5181db6ab0b4b40fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lv_ll_chg_list</definition>
        <argsstring>(lv_ll_t *ll_ori_p, lv_ll_t *ll_new_p, void *node, bool head)</argsstring>
        <name>_lv_ll_chg_list</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_ori_p</declname>
        </param>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_new_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>node</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move a node to a new linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_ori_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the original (old) linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ll_new_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the new linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>node</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>true: be the head in the new list false be the head in the new list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a43439c5831e15498ec0466d1d9e27368" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_get_head</definition>
        <argsstring>(const lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_get_head</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with head node of the linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the head of &apos;ll_p&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a29a82e55bc6f723b27fd5ace5ef0a50d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_get_tail</definition>
        <argsstring>(const lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_get_tail</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with tail node of the linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the head of &apos;ll_p&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1aabaab83f9f9e2702b590c745b0cdeb88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_get_next</definition>
        <argsstring>(const lv_ll_t *ll_p, const void *n_act)</argsstring>
        <name>_lv_ll_get_next</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>n_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with the pointer of the next node after &apos;n_act&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer a node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the next node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1ac18a896c2b3f00a20cd66f5d84d5e160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* _lv_ll_get_prev</definition>
        <argsstring>(const lv_ll_t *ll_p, const void *n_act)</argsstring>
        <name>_lv_ll_get_prev</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>n_act</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return with the pointer of the previous node after &apos;n_act&apos; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer a node </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the previous node </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a502273f22bc68d030403f152d1b12462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t _lv_ll_get_len</definition>
        <argsstring>(const lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_get_len</name>
        <param>
          <type>const <ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the length of the linked list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the linked list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a12e06698e2ff54196525370c68c54d11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _lv_ll_move_before</definition>
        <argsstring>(lv_ll_t *ll_p, void *n_act, void *n_after)</argsstring>
        <name>_lv_ll_move_before</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n_act</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>n_after</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>TODO <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n1_p</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n2_p</parametername>
</parameternamelist>
<parameterdescription>
<para>void lv_ll_swap(lv_ll_t * ll_p, void * n1_p, void * n2_p); Move a node before an other node in the same linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a linked list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_act</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to node to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n_after</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a node which should be after <computeroutput>n_act</computeroutput> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="lv__ll_8h_1a4dfeff2a4374d4bb164a45e645835484" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool _lv_ll_is_empty</definition>
        <argsstring>(lv_ll_t *ll_p)</argsstring>
        <name>_lv_ll_is_empty</name>
        <param>
          <type><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref> *</type>
          <declname>ll_p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if a linked list is empty <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ll_p</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a linked list </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true: the linked list is empty; false: not empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#ifndef<sp/>LV_LL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LV_LL_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>INCLUDES</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lv__mem_8h" kindref="compound">lv_mem.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stddef.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">/*********************</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>DEFINES</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>TYPEDEFS</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>uint8_t<sp/>lv_ll_node_t;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33" refid="structlv__ll__t" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>n_size;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>lv_ll_node_t<sp/>*<sp/>head;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>lv_ll_node_t<sp/>*<sp/>tail;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/>*<sp/>GLOBAL<sp/>PROTOTYPES</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lv_ll_init(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/>uint32_t<sp/>node_size);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_ins_head(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_ins_prev(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_ins_tail(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lv_ll_remove(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>node_p);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lv_ll_clear(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lv_ll_chg_list(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_ori_p,<sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_new_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>node,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>head);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_get_head(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_get_tail(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_get_next(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>_lv_ll_get_prev(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal">uint32_t<sp/>_lv_ll_get_len(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>_lv_ll_move_before(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_act,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>n_after);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>_lv_ll_is_empty(<ref refid="structlv__ll__t" kindref="compound">lv_ll_t</ref><sp/>*<sp/>ll_p);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">/**********************</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/>MACROS</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>**********************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LV_LL_READ(list,<sp/>i)<sp/>for(i<sp/>=<sp/>_lv_ll_get_head(&amp;list);<sp/>i<sp/>!=<sp/>NULL;<sp/>i<sp/>=<sp/>_lv_ll_get_next(&amp;list,<sp/>i))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LV_LL_READ_BACK(list,<sp/>i)<sp/>for(i<sp/>=<sp/>_lv_ll_get_tail(&amp;list);<sp/>i<sp/>!=<sp/>NULL;<sp/>i<sp/>=<sp/>_lv_ll_get_prev(&amp;list,<sp/>i))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>extern<sp/>&quot;C&quot;<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/kisvegabor/projects/littlevgl/eclipse-workspace/lv_sim_eclipse_sdl/lvgl/scripts/release_tmp/lvgl/src/lv_misc/lv_ll.h"/>
  </compounddef>
</doxygen>
